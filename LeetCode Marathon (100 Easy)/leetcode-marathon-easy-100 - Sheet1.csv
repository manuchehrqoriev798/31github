learned: divmod(), count(), Counter, split(), bisect,  Python evaluates conditions from left to right, Counter(nums).most_common(1)[0][0], strip,  d[char] = d.get(char, 0) + 1
return word.isupper() or word.islower() or word.istitle() (word = word.capitalize())), 
Need to learn: recursion, dictKeyAndValues, enumerate(num), bfs, dfs, def ordertraversal(), f"", dp = [0] * len(nums), 

Data Structures withe their properties: 
1. Lists: ordered, mutabl, dublicates allowe, my_list = [1, 2, 3, 4, 5]
2. Tuples: ordered, immutable, dublicates allow, my_tuples = [1, 2, 3, 4, 5]
3. Dictionaries: unordered, mutable, no dublicates 
4. Sets: ...
5. Strings...
6. Array
7. Stacks: impllements Last in last outs data strucutre. elementes added to the top ard removed form hte top
8. Queues: implements first in first oyt data strucutre. emlements added to the end and removed from the front
9. Deque: support appedn and pop from both side
10. linkked lists: ordered, efficient in insertiona dn deleting, 






Good things to knwo about most of topics from the Neetcode 150: 
List of topics: Arrays/hashing, binary search, graphs, binary search, heap, linked list, sliding window, stack trees, two pointers.
for example Trees: 
note: Order Traversal
class Solution:
    def orderTraversal(self, root: Optional[TreeNode]) -> List[int]:
        def dfs(node):
            if not node:
                return

            # res.append(node.val)  # Preorder Traversal: Append the current node's value before visiting its children.
            dfs(node.left)
            # res.append(node.val)  # In-order Traversal: Append the current node's value during its visit.
            dfs(node.right)
            # res.append(node.val)  # Postorder Traversal: Append the current node's value after visiting its children.

        res = []
        dfs(root)
        return res

# class Solution:
#     def orderTraversal(self, root: Optional[TreeNode]) -> List[int]:
#         if not root:
#             return []

#         res = []
#         queue = deque([root])

#         while queue:
#             node = queue.popleft()

#             # Preorder Traversal: Append the current node's value before enqueueing its children.
#             res.append(node.val)

#             if node.left:
#                 queue.append(node.left)

#             # In-order Traversal: Append the current node's value after enqueueing its left child.
#             res.append(node.val)

#             if node.right:
#                 queue.append(node.right)

#             # Postorder Traversal: Append the current node's value after enqueueing its right child.
#             res.append(node.val)

#         return res



for example linked lists:
Know how to reverse, know how ot use fast and slow pointers

for example binary search: 
basic example of binary search, etc.

etc.




,0.9734864135,https://leetcode.com/problems/counting-bits,Counting Bits,Counting Bits,bitwise,9:33:57,9:42:02,0:08:04,0:33:57,,,,
,0.9621159206,https://leetcode.com/problems/maximum-average-subarray-i,Maximum Average Subarray I,Maximum Average Subarray I,sliding window,9:47:27,10:00:03,0:12:36,0:47:27,,,,
,0.8050260647,https://leetcode.com/problems/n-th-tribonacci-number,N-th Tribonacci Number,N-th Tribonacci Number,dp,11:46:14,11:51:51,0:05:37,2:46:14,,,,
,0.7755030108,https://leetcode.com/problems/binary-search,Binary Search,Binary Search,binary search,11:53:01,11:56:19,0:03:18,2:53:01,,,,
,0.7715311095,https://leetcode.com/problems/pascals-triangle,Pascal's Triangle,Pascal's Triangle,dp,11:56:31,12:01:09,0:04:38,2:56:31,,,,
,0.7680103918,https://leetcode.com/problems/single-number,Single Number,Single Number,bitwise,12:01:14,12:05:51,0:04:38,3:01:14,,,,
,0.7106086026,https://leetcode.com/problems/first-bad-version,First Bad Version,First Bad Version,binary search,13:20:39,13:25:59,0:05:20,4:20:39,,,,
,0.6379281027,https://leetcode.com/problems/hamming-distance,Hamming Distance,Hamming Distance,bitwise,14:18:46,14:22:24,0:03:38,5:18:46,,,,
,0.6172093661,https://leetcode.com/problems/binary-tree-paths,Binary Tree Paths,Binary Tree Paths,tree,14:26:09,14:33:10,0:07:00,5:26:09,,,,
,0.5907254551,https://leetcode.com/problems/convert-sorted-array-to-binary-search-tree,Convert Sorted Array to Binary Search Tree,Convert Sorted Array to Binary Search Tree,tree,14:33:18,14:41:57,0:08:39,5:33:18,,,,
,0.589497227,https://leetcode.com/problems/merge-two-binary-trees,Merge Two Binary Trees,Merge Two Binary Trees,tree,14:42:31,14:48:31,0:06:00,5:42:31,,,,
,0.568092948,https://leetcode.com/problems/verifying-an-alien-dictionary,Verifying an Alien Dictionary,Verifying an Alien Dictionary,hash,15:11:43,15:35:50,0:24:08,6:11:43,,,,


,0.5303545237,https://leetcode.com/problems/roman-to-integer,Roman to Integer,Roman to Integer,math,15:46:20,15:56:36,0:10:16,6:46:20,,,,
,0.5232395045,https://leetcode.com/problems/license-key-formatting,License Key Formatting,License Key Formatting,string,15:57:23,16:10:04,0:12:41,6:57:23,,,,

,0.4818380626,https://leetcode.com/problems/majority-element,Majority Element,Majority Element,hash,16:21:10,16:23:49,0:02:39,7:21:10,,,,
,0.4791551859,https://leetcode.com/problems/same-tree,Same Tree,Same Tree,tree,16:23:58,16:28:16,0:04:18,7:23:58,,,,
,0.4538126817,https://leetcode.com/problems/binary-tree-inorder-traversal,Binary Tree Inorder Traversal,Binary Tree Inorder Traversal,tree,16:28:25,16:34:06,0:05:41,7:28:25,,,,
,0.4529098627,https://leetcode.com/problems/summary-ranges,Summary Ranges,Summary Ranges,array,16:34:15,16:47:38,0:13:23,7:34:15,,,,



,0.4168472697,https://leetcode.com/problems/add-binary,Add Binary,Add Binary,divmod,17:06:13,17:11:56,0:05:43,8:06:13,,,,


,0.3218211007,https://leetcode.com/problems/remove-duplicates-from-sorted-array,Remove Duplicates from Sorted Array,Remove Duplicates from Sorted Array,two pointers,18:00:32,18:09:51,0:09:19,9:00:32,,,,
,0.2912895068,https://leetcode.com/problems/isomorphic-strings,Isomorphic Strings,Isomorphic Strings,hash,18:11:25,18:19:01,0:07:36,9:11:25,,,,
,0.2851433041,https://leetcode.com/problems/intersection-of-two-arrays,Intersection of Two Arrays,Intersection of Two Arrays,hash,18:19:09,18:22:21,0:03:12,9:19:09,,,,
,0.2818393104,https://leetcode.com/problems/contains-duplicate-ii,Contains Duplicate II,Contains Duplicate II,sliding window,18:22:31,18:32:17,0:09:46,9:22:31,,,,


,0.281381725,https://leetcode.com/problems/merge-two-sorted-lists,Merge Two Sorted Lists,Merge Two Sorted Lists,linked list,18:32:24,18:37:18,0:04:54,9:32:24,,,,

,0.1979477421,https://leetcode.com/problems/sort-array-by-parity,Sort Array By Parity,Sort Array By Parity,two pointers,19:19:27,19:22:16,0:02:49,10:19:27,,,,
,0.1932758502,https://leetcode.com/problems/monotonic-array,Monotonic Array,Monotonic Array,array,19:22:21,19:25:46,0:03:26,10:22:21,,,,
,0.1447164414,https://leetcode.com/problems/remove-element,Remove Element,Remove Element,two pointers,19:33:47,20:02:16,0:28:29,10:33:47,,,,

,0.1290686641,https://leetcode.com/problems/find-all-numbers-disappeared-in-an-array,Find All Numbers Disappeared in an Array,Find All Numbers Disappeared in an Array,hash,20:02:25,20:03:48,0:01:23,11:02:25,,,,


,0.1237648281,https://leetcode.com/problems/implement-strstr,Implement strStr(),Implement strStr(),string,20:03:52,20:09:39,0:05:47,11:03:52,,,,
,0.1156414306,https://leetcode.com/problems/invert-binary-tree,Invert Binary Tree,Invert Binary Tree,tree,20:09:44,20:15:26,0:05:42,11:09:44,,,,

,0.09487528483,https://leetcode.com/problems/squares-of-a-sorted-array,Squares of a Sorted Array,Squares of a Sorted Array,two pointers,20:22:38,20:25:42,0:03:04,11:22:38,,,,
,0.08389145664,https://leetcode.com/problems/jewels-and-stones,Jewels and Stones,Jewels and Stones,hash,20:25:51,20:27:06,0:01:14,11:25:51,,,,

,0.06980116512,https://leetcode.com/problems/ransom-note,Ransom Note,Ransom Note,hash,20:35:32,20:40:40,0:05:07,11:35:32,,,,

,0.06484449267,https://leetcode.com/problems/fibonacci-number,Fibonacci Number,Fibonacci Number,dp,20:43:31,20:44:47,0:01:16,11:43:31,,,,

,0.06216767042,https://leetcode.com/problems/detect-capital,Detect Capital,Detect Capital,string,20:44:55,20:47:25,0:02:31,11:44:55,,,,
,0.04831085622,https://leetcode.com/problems/happy-number,Happy Number,Happy Number,hash,,,,,,,,
,0.007832160334,https://leetcode.com/problems/intersection-of-two-arrays-ii,Intersection of Two Arrays II,Intersection of Two Arrays II,hash,,,,,,,,

,0.004520092653,https://leetcode.com/problems/subtree-of-another-tree,Subtree of Another Tree,Subtree of Another Tree,tree,,,,,,,,
